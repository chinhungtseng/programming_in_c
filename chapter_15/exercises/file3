Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
   
   Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
   
Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
   
Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
   
Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
   
Exercises

1. Type in and run the three programs presented in this 
   chapter. Compare the output produced by each program 
   with the output presented in the text.
   
2. Go back to programs developed earlier in this book and
   experiment with redirecting their input and output to 
   files.
   
3. Write a program to copy one file to another, replacing
   all lowercase characters with their uppercase equivalents.
   
4. Write a program that merges lines alternately from two 
   files and writes the results to stdout. If one file has 
   fewer lines than the other, the remaining lines from the 
   larger file should simply be copied to stdout.
   
5. Write a program that writes columns m through n of each 
   line of a file to stdout. Have the program accept the 
   values of m and n from the terminal window.
   
6. Write a program that displays the contents of a file at
   the terminal 20 lines at a time. At the end of each 20 
   lines, have the program wait for a character to be entered 
   from the terminal. If the character is the letter q, the
   program should stop the display of the file; any other 
   character should cause the next 20 lines from the file 
   to be displayed.
